!! Installations 

The first step you need to do to get started with PharoThings is to install an Operating System in your Raspberry Pi. When you buy a Raspberry Pi, the OS is not factory installed.

Raspbian is the Foundation’s official supported operating system, a Linux OS based on Debian Stretch to run in ARM processors.

Once you've installed the Raspbian Linux distribution, you can install PharoThings and control devices remotely.

!!! Installing PharoThings on Raspberry Pi
Install PharoThings requires to get Pharo, PharoThings and an ARM virtual machine. We will build the image on our local computer with the correct files and after we will copy to a Raspberry Pi and execute it there. In the third step, we will connect the Pharo from the local computer into Pharo of Raspberry Pi.

!!!! Download PharoLauncher

Use the PharoLauncher (an application to help you running multiple versions and images of Pharo) and install Pharo 6.1. You can get the launcher from *http://pharo.org/download*.
You can also directly install a version of Pharo from the same place.

+Installing PharoLauncher.>figures/InstallLauncher.png|width=60|label=installLauncher+

!!!! Download Pharo 61

Run the Pharo Launcher. Double click the distribution you want to create a image and give a name to image (see Figure *@InstallPharo61*). A short name and without spaces is recommended, because we will type this name and path in command line on Linux. 

+Download Pharo 61.>figures/Select61.png|width=60|label=InstallPharo61+

!!!! Execute your Pharo image

Launch the image as shown in Figure *@Execute61*. A folder with the image name will be created inside the folder Pharo:  ==/Users/your_user_name/Documents/Pharo/==

In this example the folder is  ==/Users/my_user_name/Documents/Pharo/Pharo6.1==

+Open your Pharo image.>figures/Execute61.png|width=60|label=Execute61+

!!!! Load PharoThings

Open Playground and execute this command to install the server part of PharoThings (as shown in Figure *@LoadingPharoThings*):

[[[
Metacello new
	baseline: 'PharoThings';
	repository: 'github://pharo-iot/PharoThings/src';
	load: #(RemoteDevServer Raspberry).
]]]

+Loading PharoThings.>figures/LoadingPharoThings.png|width=60|label=LoadingPharoThings+

Then configure image to disable slow browser plugins (instead remote browser will be much slower):

[[[
ClySystemEnvironmentPlugin disableSlowPlugins.
]]]

!!!! Snapshot your Image

 In Pharo, click and “Save and Quit”. This way all your code and configurations are saved and ready to be reused.
  
!!!! Download the VM

- Download ArmVM from *http://files.pharo.org/vm/pharo-spur32/linux/armv6/latest.zip*.
- Unzip it
- Copy the files shown in FIgure *@CopyARM*  to Pharo folder ==/Users/your_user_name/Documents/Pharo/pharo_image_folder== 

+Copying PharoARM.>figures/CopyARM.png|width=60|label=CopyARM+

!!!! Copying Sources
Copy the file PharoV60.sources from the folder ==/Applications/Pharo.app/Contents/MacOS== to folder ==/Users/your_user_name/Documents/Pharo/images/pharo_image_folder/lib/pharo/5.0-201804182009/==

!!!! Copy to the Raspberry

Copy this folder to your Raspberry Pi (via flashdrive, network etc). The folder must have the structure shown in Figure *@OnRasp*.

+Copying the folder on your Raspberry.>figures/OnRasp.png|width=60|label=OnRasp+

!!! Execute PharoThings on Raspberry

!!!! Turn on your Raspberry and connect it to the network.

In this example, the folder Pharo6.1 was copied to folder ==/home/pi/==.

Is necessary apply execute permissions on the Pharo files, using the command chmod +x

[[[
chmod +x /home/pi/Pharo6.1/pharo

chmod +x /home/pi/Pharo6.1/lib/pharo/5.0-201804182009/pharo
]]]

!!!! Start Server
Start the Pharo typing the following command in the Terminal on your Raspberry :

[[[
pharo --headless Server.image remotePharo --startServerOnPort=40423
]]]

If all is right, you will see the answer:

[[[
'a TlpRemoteUIManager is registered on port 40423'
]]]

So now we have the Raspberry running the TelePharo on TCP port 40423 (as shown in Figure *@Commandline*) and we can connect into it from another computer.

+Server up and running.>figures/Commandline.png|width=60|label=Commandline+

!!! Connecting Pharo client on remote Pharo

Open again the Pharo on your local computer and execute this command to install the PharoThings client:

[[[
Metacello new
baseline: 'PharoThings';
repository: 'github://pharo-iot/PharoThings/src';
load: 'RemoteDev'.
]]]

Type this command to connect to the remote TelePharo on Raspberry (change the IP to your Raspberry IP):

[[[
remotePharo := TlpRemoteIDE connectTo: (TCPAddress ip: #[193 51 236 167] port: 40423)
]]]

Here we are using specialized Raspberry tools. They require the auto-refresh feature of inspector which is not enabled by default in Pharo 6. To activate it evaluate:

[[[
GTInspector enableStepRefresh
]]]

So for your board model you need to choose an appropriate board class. For Raspberry, it will be one of the RpiBoard subclasses. Currently, you can use the following classes according to the models:

- RpiBoardBRev1: Raspberry Pi Model B Revision 1
- RpiBoardBRev2: Raspberry Pi Model B Revision 2
- RpiBoard3B: Raspberry Pi Model B\+, Pi2 Model B, Pi3 Model B, Pi3 Model B\+

With the chosen class evaluate the following code to open an inspector:

[[[
remoteBoard := remotePharo evaluate: [ RpiBoard3B current].
remoteBoard inspect.
]]]

And will be open the inspector showing the PIN scheme (as shown in Figure *@PharoThingsinspector*)

+Remote GPIO inspector>figures/PharoThingsInspector.png|width=60|label=PharoThingsinspector+

!!!! GPIOs

The board inspector shows a layout of pins similar to Raspberry Pi docs. But here it is a live tool which represents the current pins state.

In the picture the board is shown with two configured pins: gpio3 and gpio4, which are connected to physical button and led accordingly.

Digital pins are shown with green/red icons which represent high/low (1/0) values. In case of output pins you are able to click on the icon to toggle the value. Icons are updated according to pin value changes. If you click on physical button on your board the inspector will show the updated pin state by changing its icon color.

The evaluation pane in the bottom of the inspector provides bindings to gpio pins which you can script by #doIt/printIt commands. The example shows expressions which were used to configure a button and led.

!!! In the next chapter

Now that we have installed the Operation System and PharoThings in the Raspberry Pi, we can play with LEDs, sensors, LCD displays and more. 

In the next chapter we will see how turing on/off a LED using PharoThings. 
